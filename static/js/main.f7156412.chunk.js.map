{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","users","i","key","SearchBox","searchfield","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","this","setState","hasError","error","info","Component","App","onSearchChange","event","target","value","state","fetch","then","response","json","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+NAgBeA,EAdF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAOC,EAAiB,EAAjBA,MAAQC,EAAS,EAATA,GAG3B,OACI,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAA1B,cAClB,6BACA,4BAAKF,GACL,2BAAIC,MCUDK,EAhBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACVC,EAAgBD,EAAOE,KAAI,SAACC,EAAOC,GACrC,OAAS,kBAAC,EAAD,CACLC,IAAMD,EACNT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAGzB,OACI,6BACMO,ICACK,EAVG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,yBAAKZ,UAAU,OACf,2BAAOA,UAAU,mCACjBa,KAAK,SAASC,YAAY,eAC1BC,SAAYH,MCALI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAC7DJ,EAAMK,WCsBJC,E,mLAxBAN,GAEPO,KAAKC,SAAW,CACZC,UAAU,K,wCAKAC,EAAOC,GACrBJ,KAAKC,SAAS,CAAEC,UAAU,M,+BAK1B,OAAIF,KAAKC,SAASC,SACR,+CAEHF,KAAKP,MAAMK,a,GAlBCO,aCgDZC,G,kBAvCX,aAAc,IAAD,8BACT,+CAaJC,eAAiB,SAACC,GACd,EAAKP,SAAS,CAACd,YAAaqB,EAAMC,OAAOC,SAbzC,EAAKC,MAAQ,CACT/B,OAAQ,GACRO,YAAa,IAJR,E,iFAQO,IAAD,OACfyB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA9B,GAAK,OAAI,EAAKkB,SAAS,CAAErB,OAAOG,S,+BAMhC,IAAD,EAC0BiB,KAAKW,MAA7B/B,EADF,EACEA,OAASO,EADX,EACWA,YACV6B,EAAgBpC,EAAOqC,QAAO,SAAAC,GAChC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASjC,EAAYgC,kBAEzD,OAAQvC,EAAOyC,OAGP,yBAAK7C,UAAU,MACf,4CACA,kBAAC,EAAD,CAAWY,aAAcY,KAAKO,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQoC,OAP9B,2C,GAxBMX,c,MCEEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLkC,QAAQlC,MAAMA,EAAMmC,a","file":"static/js/main.f7156412.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name , email , id }) => {  //done to keep it clean.\n    //const { name , email , id } = props; \n    // this is destructuring // can remove props. from string templates\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-s'>\n        <img alt='idphoto' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';// eslint-disable-next-line\nimport { robots } from './robots';\nimport Card from './Card';\n\nconst CardList = ({ robots }) =>{\n    const cardComponent = robots.map((users, i) => {\n        return ( <Card \n            key ={i}\n            id={robots[i].id}\n            name={robots[i].name} \n            email={robots[i].email}\n             />)\n    })\n    return(\n        <div>\n            { cardComponent }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react'; // eslint-disable-next-line\nimport CardList from './CardList';\n//state is what describes an app as an object and states can change according to input \n//and usually live in the parent component\n//props are outcomes of a state\nconst SearchBox = ({searchfield, SearchChange}) =>{\n    return(\n        <div className='pa2'>\n        <input className='pa3 ba b--green bg-lightest-blue' \n        type='search' placeholder='Look up bots' \n        onChange = {SearchChange}/>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return(\n        <div style={{overflowY:'scroll', border:'3px solid black', height:'800px'}}>\n            {props.children}\n        </div>    \n    )\n};\n\nexport default Scroll;\n\n\n//there were 3 phases\n//props\n//states\n//children\n//here in this scroll function because it isnt a self closing tag, \n//and its targetting some element ","import React, { Component } from 'react'; //gotta destructure \n\nclass ErrorBoundry extends Component {\n    constuctor(props){    // eslint-disable-next-line\n        //super(props);\n        this.setState = {\n            hasError: false\n        }\n    }\n\n//react lifeCycle hook (like try catch block)\n    componentDidCatch(error, info){\n        this.setState({ hasError: true })\n    }\n\n\n    render(){\n        if (this.setState.hasError){ \n           return <h1>That ain't good</h1>\n        }\n        return this.props.children\n    }\n         \n}\n\n\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList'; // eslint-disable-next-line\n//import { robots } from './robots';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n\n\nclass App extends Component{\n    constructor(){\n        super()\n        this.state = { // states are called smart components \n            robots: [],\n            searchfield: ''\n        \n        }\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({ robots:users }));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n    render() {\n        const {robots,  searchfield} = this.state; //cleaning up PRACTICE\n        const filteredRobots =robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        return !robots.length ? //alt = robots.length === 0 ; it defaults to fales.using Turnary\n            <h1>LOADING</h1> :\n            (\n                <div className='tc'>\n                <h1>Robo Friends</h1>\n                <SearchBox SearchChange={this.onSearchChange}/>\n                <Scroll> \n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots}/> \n                    </ErrorBoundry>\n                </Scroll>\n                </div>\n            );\n           \n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card'; //default // eslint-disable-next-line\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n//import { robots } from './robots'; //not default needs destructuring // eslint-disable-next-line\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}